name: "Release"
on:
  push:
    tags:
      - 'v[0-9]*'
permissions:
  contents: read
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      id: setup-python
      with:
        python-version: '3.9'
    - name: Cache pip downloads
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
    - name: Check version strings
      run: tox -e checkver -- --tag_ref "${{ github.ref }}"
    - name: Run tox tests
      run: tox -e py
    - name: Clean up
      run: python -m pip cache remove adrt || true
  sdist:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools wheel numpy
    - name: Build sdist
      run: python setup.py sdist
      env:
        SETUPTOOLS_USE_DISTUTILS: local
    - name: Store artifact
      uses: actions/upload-artifact@v2
      with:
        name: sdist
        path: dist/adrt-*.tar.gz
        if-no-files-found: error
    - name: Install test dependencies
      run: python -m pip install --upgrade tox
    - name: Run tox tests
      run: tox -e py --installpkg dist/adrt-*.tar.gz
  wheel:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-arch: [x64]
        include:
          - os: windows-latest
            python-arch: x86
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
        architecture: ${{ matrix.python-arch }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools wheel numpy==1.17
    - name: Extra dependencies (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: python -m pip install --upgrade auditwheel
    - name: Extra dependencies (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: python -m pip install --upgrade delocate
    - name: Build wheel (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        python setup.py bdist_wheel
        auditwheel show dist/adrt-*.whl
        auditwheel repair dist/adrt-*.whl
        rm dist/adrt-*.whl
        mv wheelhouse/adrt-*-manylinux*.whl dist/
      env:
        SETUPTOOLS_USE_DISTUTILS: local
        CFLAGS: '-O3 -std=c++11 -flto -fvisibility=hidden -fvisibility-inlines-hidden -fno-plt -fcf-protection=full -fstack-protector-strong -fstack-clash-protection -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -Wconversion -Wfloat-equal -Wimplicit-fallthrough -Warray-bounds=2 -D_FORTIFY_SOURCE=2'
        LDFLAGS: '-Wl,--strip-all,--as-needed,--sort-common,-O1,-z,relro,-z,now,-z,noexecstack'
        CC: 'gcc-11 -pthread'
        CXX: 'g++-11 -pthread'
        LDSHARED: 'g++-11 -pthread -shared'
    - name: Build wheel (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: python setup.py bdist_wheel
      env:
        SETUPTOOLS_USE_DISTUTILS: local
    - name: Build wheel (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        python setup.py bdist_wheel
        delocate-listdeps dist/adrt-*.whl
        delocate-wheel -v dist/adrt-*.whl
      env:
        SETUPTOOLS_USE_DISTUTILS: local
        CFLAGS: '-O3 -std=c++11 -flto -fvisibility=hidden -fvisibility-inlines-hidden -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -Wconversion -Wfloat-equal -Wimplicit-fallthrough'
    - name: Store artifact
      uses: actions/upload-artifact@v2
      with:
        name: wheel
        path: dist/adrt-*.whl
        if-no-files-found: error
    - name: Diagnostics (Linux)
      if: ${{ runner.os == 'Linux' }}
      continue-on-error: true
      run: |
        shopt -s globstar
        readelf --wide --symbols --dynamic build/**/*.so
    - name: Diagnostics (Windows)
      if: ${{ runner.os == 'Windows' }}
      continue-on-error: true
      run: |
        $vsinstance=Get-VSSetupInstance | Select-VSSetupInstance -Require Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -Product * -Latest
        Import-Module $(Join-Path -Path $vsinstance.InstallationPath -ChildPath Common7\Tools\Microsoft.VisualStudio.DevShell.dll)
        Enter-VsDevShell $vsinstance.InstanceId
        dumpbin /exports /imports $((Get-ChildItem -Path build -Filter *.pyd -Recurse).FullName)
    - name: Install test dependencies
      run: python -m pip install --upgrade pytest tox
    - name: Install wheel
      run: python -m pip install dist/adrt-*.whl
      shell: bash
    - name: Run tests
      run: pytest
    - name: Run tox tests
      run: tox -e py --installpkg dist/adrt-*.whl
      shell: bash
  test-ubuntu:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: wheel
    strategy:
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      id: setup-python
      with:
        python-version: ${{ matrix.python }}
    - name: Cache pip downloads
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-releasetest-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasetest-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
    - name: Download wheel
      uses: actions/download-artifact@v2
      with:
        name: wheel
        path: dist/
    - name: Run tox tests
      run: tox -e py --installpkg dist/adrt-*-manylinux*.whl
    - name: Clean up
      run: python -m pip cache remove adrt || true
  draft-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [sdist, wheel, test-ubuntu]
    permissions:
      contents: write
    steps:
    - name: Download sdist
      uses: actions/download-artifact@v2
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: wheel
        path: dist/
    - name: Compute checksums
      run: |
        echo 'SHA256 Checksums:' > release_body.md
        echo '```' >> release_body.md
        sha256sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed ' s!dist/!!' >> release_body.md
        echo '```' >> release_body.md
    - name: Create release
      run: |
        ADRT_RELEASE_TAG="${{ github.ref }}"
        gh release create ${ADRT_RELEASE_TAG#refs/tags/} dist/adrt-*.tar.gz dist/adrt-*.whl --draft --notes-file release_body.md --repo "${{ github.repository }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Show release draft
      run: cat release_body.md
    - name: Show archive contents
      run: |
        for f in dist/*.tar.gz; do
          echo "----- FILE: $f -----"
          tar -tzvf "$f"
          echo ""
        done
        for f in dist/*.whl; do
          echo "----- FILE: $f -----"
          zipinfo "$f"
          echo ""
        done
