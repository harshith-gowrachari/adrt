name: "Release"
on:
  push:
    tags:
      - 'v[0-9]*'
permissions:
  contents: read
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'
    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
    - name: Check version strings
      run: python -m tox run -e checkver -- --tag_ref '${{ github.ref }}' --not_dev
    - name: Check types
      run: python -m tox run -e type
      env:
        CPPFLAGS: '-U_FORTIFY_SOURCE'
        CFLAGS: '-O0 -g0 -fvisibility=hidden -fvisibility-inlines-hidden'
    - name: Run tox tests
      run: python -m tox run -e py
      env:
        CPPFLAGS: '-UNDEBUG -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC'
        CFLAGS: '-O3 -g0 -flto -fvisibility=hidden -fvisibility-inlines-hidden'
    - name: Clean up
      run: python -m pip cache remove adrt || true
  check-cpp:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Cache Catch2
      uses: actions/cache@v3
      id: cache-catch2
      with:
        path: tests/cpp/catch2/catch.hpp
        key: catch2-3725c0f0a75f376
    - name: Setup Python
      if: steps.cache-catch2.outputs.cache-hit != 'true'
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'
    - name: Download Catch2
      if: steps.cache-catch2.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade -r tools/download_catch2_requirements.txt
        python tools/download_catch2.py tests/cpp/catch2/catch.hpp
    - name: Build tests (Linux)
      if: runner.os == 'Linux'
      run: g++ -std=c++11 -g0 -UNDEBUG -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -Wall -Wextra -Wpedantic $(find src/adrt tests/cpp/ -name '*.cpp' -not -name 'adrt_cdefs_py.cpp') -I src/adrt/ -o tests/cpp/test_all.exe
    - name: Build tests (Windows)
      if: runner.os == 'Windows'
      run: |
        $vsinstance=Get-VSSetupInstance | Select-VSSetupInstance -Require Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -Product * -Latest
        & $(Join-Path -Path $vsinstance.InstallationPath -ChildPath Common7\Tools\Launch-VsDevShell.ps1) -SkipAutomaticLocation
        $cppfiles=Get-ChildItem -Path src\adrt\*,tests\cpp\* -Include *.cpp -Exclude adrt_cdefs_py.cpp
        cl /std:c++14 /EHsc /MDd /UNDEBUG /permissive- /Zc:inline,preprocessor,__cplusplus /wd5105 /I src\adrt\ $cppfiles.FullName /link /out:tests\cpp\test_all.exe
    - name: Run tests
      run: ./tests/cpp/test_all.exe
  sdist:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-cpp
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
    - name: Build sdist
      run: python -m build --sdist
    - name: Store artifact
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/adrt-*.tar.gz
        if-no-files-found: error
  wheel:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: sdist
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Checkout repository (Windows)
      uses: actions/checkout@v3
      if: runner.os == 'Windows'
      with:
        persist-credentials: false
        path: repo
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install cibuildwheel
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade 'cibuildwheel>=2.5.0'
    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse dist/adrt-*.tar.gz
      shell: bash
      env:
        CIBW_BUILD: 'cp*'
        # Linux configuration
        CIBW_ARCHS_LINUX: 'auto64'
        CIBW_ENVIRONMENT_LINUX: >-
          CPPFLAGS='-D_FORTIFY_SOURCE=2 -DNDEBUG'
          CFLAGS='-O3 -g0 -flto -fvisibility=hidden -fvisibility-inlines-hidden -fno-plt -fno-semantic-interposition -fcf-protection=full -fstack-protector-strong -fstack-clash-protection -fno-math-errno -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wsign-compare -Wfloat-conversion -Warith-conversion -Wstrict-overflow=5 -Wfloat-equal -Wimplicit-fallthrough -Warray-bounds=2 -Wvla -Wunused-result -Wduplicated-branches -Wduplicated-cond -Wnull-dereference -Wstack-protector -Wtrampolines -Walloca -Wshift-overflow=2 -Wswitch-default -Wshadow -Wundef -Wcast-align=strict -Wstringop-overflow=4 -Wformat=2 -Wformat-overflow=2 -Wformat-truncation=2 -Wformat-signedness'
          LDFLAGS='-Wl,--strip-all,--as-needed,--sort-common,-O1,-z,relro,-z,now,-z,noexecstack'
        # Windows configuration
        CIBW_ARCHS_WINDOWS: 'auto'
        CIBW_BEFORE_ALL_WINDOWS: 'pwsh ${{ github.workspace }}\repo\tools\patch_license_windows.ps1 {package}\LICENSE.txt'
        CIBW_ENVIRONMENT_WINDOWS: >-
          CL='/permissive- /Zc:inline,preprocessor,__cplusplus /DNDEBUG'
        # macOS configuration
        CIBW_ARCHS_MACOS: 'universal2'
        CIBW_ENVIRONMENT_MACOS: >-
          CPPFLAGS='-DNDEBUG'
          CFLAGS='-O3 -g0 -flto -fvisibility=hidden -fvisibility-inlines-hidden -Wall -Wextra -Wpedantic -Wconversion -Wfloat-equal -Wimplicit-fallthrough'
          LDFLAGS='-Wl,-S,-x,-dead_strip_dylibs'
    - name: Store artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheel
        path: wheelhouse/adrt-*.whl
        if-no-files-found: error
    - name: Diagnostics (Linux)
      if: runner.os == 'Linux'
      continue-on-error: true
      run: |
        touch 'diagnostics.txt'
        for wheelfile in wheelhouse/adrt-*.whl; do
          if [[ ! -e "$wheelfile" ]]; then
            continue
          fi
          echo "----- WHEEL: $(basename $wheelfile) -----" | tee -a 'diagnostics.txt'
          dir="$(mktemp -d)"
          unzip -q "$wheelfile" -d "$dir"
          readelf --wide --symbols --dynamic "${dir}"/adrt/*.so | tee -a 'diagnostics.txt'
          echo | tee -a 'diagnostics.txt'
        done
    - name: Diagnostics (Windows)
      if: runner.os == 'Windows'
      continue-on-error: true
      run: |
        $vsinstance=Get-VSSetupInstance | Select-VSSetupInstance -Require Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -Product * -Latest
        & $(Join-Path -Path $vsinstance.InstallationPath -ChildPath Common7\Tools\Launch-VsDevShell.ps1) -SkipAutomaticLocation
        $ProgressPreference = 'SilentlyContinue'
        Remove-Item 'wheel-diagnostic' -Recurse -ErrorAction SilentlyContinue
        $baseextract = New-Item -Path . -Name 'wheel-diagnostic' -ItemType 'directory'
        $null = New-Item -Name diagnostics.txt -ItemType File
        Get-ChildItem -Path 'wheelhouse' -Filter 'adrt-*.whl' | ForEach-Object {
          $wheelfile = $_
          Write-Output "----- WHEEL: $($wheelfile.Name) -----`n" | Tee-Object -FilePath 'diagnostics.txt' -Append
          $destdir = New-Item -Path $baseextract.FullName -Name $wheelfile.Basename -ItemType 'directory'
          Expand-Archive -Path $wheelfile.FullName -DestinationPath $destdir.FullName
          dumpbin /exports /imports $((Get-ChildItem -Path $destdir.FullName -Filter '*.pyd' -Recurse).FullName) | Tee-Object -FilePath 'diagnostics.txt' -Append
          Write-Output "`n" | Tee-Object -FilePath 'diagnostics.txt' -Append
        }
    - name: Diagnostics (macOS)
      if: runner.os == 'macOS'
      continue-on-error: true
      run: |
        touch 'diagnostics.txt'
        for wheelfile in wheelhouse/adrt-*.whl; do
          if [[ ! -e "$wheelfile" ]]; then
            continue
          fi
          echo "----- WHEEL: $(basename $wheelfile) -----" | tee -a 'diagnostics.txt'
          dir="$(mktemp -d)"
          unzip -q "$wheelfile" -d "$dir"
          echo 'Libraries:' | tee -a 'diagnostics.txt'
          otool -L -arch all "${dir}"/adrt/*.so | tee -a 'diagnostics.txt'
          echo 'Symbols:' | tee -a 'diagnostics.txt'
          nm -arch all "${dir}"/adrt/*.so | tee -a 'diagnostics.txt'
          echo | tee -a 'diagnostics.txt'
        done
    - name: Prepare diagnostics upload
      continue-on-error: true
      run: mv 'diagnostics.txt' 'diagnostics-${{ runner.os }}-${{ runner.arch }}-run${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}-job${{ github.job }}.txt'
    - name: Store diagnostics
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics
        path: diagnostics-*.txt
        if-no-files-found: warn
  check-artifacts:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: wheel
    steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'
    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-releasecheckartifacts-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheckartifacts-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade twine abi3audit
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: dist/
    - name: Check artifacts
      run: python -m twine check --strict dist/*
    - name: Check Python ABI
      run: python -m abi3audit dist/*.whl
  draft-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-artifacts
    permissions:
      contents: write
    steps:
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: dist/
    - name: Draft release body
      run: |
        {
          echo -e '<details><summary>SHA256 Checksums</summary>\n\n```'
          sha256sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed 's!dist/!!'
          echo -e '```\n\n</details>'
        } > release_body.md
    - name: Create release
      run: gh release create '${{ github.ref_name }}' --title '${{ github.ref_name }}' --target '${{ github.sha }}' --draft --notes-file 'release_body.md' --repo '${{ github.repository }}' dist/adrt-*.tar.gz dist/adrt-*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download diagnostics
      uses: actions/download-artifact@v3
      with:
        name: diagnostics
        path: diagnostics/
    - name: Show archive contents
      run: |
        for f in dist/*.tar.gz; do
          echo "----- FILE: $(basename $f) -----"
          tar -tzvf "$f"
          echo
        done
        for f in dist/*.whl; do
          echo "----- FILE: $(basename $f) -----"
          zipinfo "$f"
          echo
        done
    - name: Show diagnostics
      run: cat diagnostics/*.txt
  upload:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: draft-release
    environment: pypi
    steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade twine
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: dist/
    - name: Upload package
      run: python -m twine upload --non-interactive dist/*
      env:
        TWINE_USERNAME: '__token__'
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  publish-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: upload
    permissions:
      contents: write
    steps:
    - name: Publish GitHub release
      run: gh release edit '${{ github.ref_name }}' --draft=false --repo '${{ github.repository }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
