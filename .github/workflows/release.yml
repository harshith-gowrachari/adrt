name: "Release"
on:
  push:
    tags:
      - 'v*'
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
    - name: Run tox tests
      run: tox -e py
  sdist:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools numpy
    - name: Build sdist
      run: python setup.py sdist
      env:
        SETUPTOOLS_USE_DISTUTILS: local
    - name: Store artifact
      uses: actions/upload-artifact@v2
      with:
        name: sdist
        path: dist/adrt-*.tar.gz
  wheel:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools wheel numpy==1.17 pytest
    - name: Extra dependencies (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: python -m pip install --upgrade auditwheel
    - name: Extra dependencies (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: python -m pip install --upgrade delocate
    - name: Build wheel (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        python setup.py bdist_wheel
        auditwheel show dist/adrt-*.whl
        auditwheel repair dist/adrt-*.whl
        rm dist/adrt-*.whl
        mv wheelhouse/adrt-*-manylinux*.whl dist/
      env:
        SETUPTOOLS_USE_DISTUTILS: local
        CFLAGS: '-std=c++11 -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -Wfloat-conversion -Wfloat-equal -Wimplicit-fallthrough -D_FORTIFY_SOURCE=2'
        LDFLAGS: '-Wl,--strip-all,--as-needed,-O1,-z,relro,-z,now,-z,noexecstack'
    - name: Build wheel (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: python setup.py bdist_wheel
      env:
        SETUPTOOLS_USE_DISTUTILS: local
    - name: Build wheel (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        python setup.py bdist_wheel
        delocate-listdeps dist/adrt-*.whl
        delocate-wheel -v dist/adrt-*.whl
      env:
        SETUPTOOLS_USE_DISTUTILS: local
        CFLAGS: '-std=c++11 -Wall -Wextra -Wpedantic -Wno-unknown-pragmas -Wfloat-conversion -Wfloat-equal -Wimplicit-fallthrough'
    - name: Store artifact
      uses: actions/upload-artifact@v2
      with:
        name: wheel
        path: dist/adrt-*.whl
    - name: Install wheel
      run: python -m pip install dist/adrt-*.whl
      shell: bash
    - name: Run tests
      run: pytest
  test-ubuntu:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: wheel
    strategy:
      matrix:
        python: [3.6, 3.7, 3.8, 3.9]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade pytest
    - name: Download wheel
      uses: actions/download-artifact@v2
      with:
        name: wheel
        path: dist/
    - name: Install wheel
      run: python -m pip install dist/adrt-*-manylinux*.whl
    - name: Run tests
      run: pytest
  draft-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [sdist, wheel, test-ubuntu]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download sdist
      uses: actions/download-artifact@v2
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: wheel
        path: dist/
    - name: Compute checksums
      run: |
        echo 'SHA256 Checksums:' > release_body.md
        echo '```' >> release_body.md
        sha256sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed ' s!dist/!!' >> release_body.md
        echo '```' >> release_body.md
    - name: Create release
      run: |
        ADRT_RELEASE_TAG="${{ github.ref }}"
        gh release create ${ADRT_RELEASE_TAG#refs/tags/} dist/adrt-*.tar.gz dist/adrt-*.whl --draft --notes-file release_body.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Show release draft
      run: cat release_body.md
    - name: Show archive contents
      run: |
        for f in dist/*.tar.gz; do
          echo "----- FILE: $f -----"
          tar -tzvf "$f"
          echo ""
        done
        for f in dist/*.whl; do
          echo "----- FILE: $f -----"
          zipinfo "$f"
          echo ""
        done
