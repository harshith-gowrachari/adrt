Approximate Discrete Radon Transform
====================================

.. _adrt-description:

Single-quadrant ADRT
--------------------

We show how to compute the single quadrant ADRT. As an example, we will
compute the ADRT of a :math:`16 \times 16` image generated by the
indicator function of an :math:`\ell_1`-ball, centered at
:math:`(0.25,0)`. The image is plotted below.

.. plot::  _images/l1ball.py
    :include-source:

The ADRT is computed by calling ``adrt.adrt()``. The result is an array
of size :math:`4 \times (2N-1) \times N` for an :math:`N \times N`
image, containing four single-quadrant ADRTs.

.. plot::  _images/l1ball_adrt_quadrants.py
    :include-source:

One can compute the ADRT partially by outputing the ADRT after
designated number of iterations. For example,
``adrt.adrt(Z,start=0,end=k)`` computes ``k`` iterations of the ADRT.
These results for quadrant 2 are shown below.

.. plot:: _images/l1ball_adrt_iters.py
    :include-source:


Full ADRT
---------

The full ADRT contains all four quadrants. A simple way to display all
four quadrants is to stitch them together. The ``adrt`` package provides
a Python utility function ``adrt.utils.stitch_adrt()`` that transforms
the ADRT output into a contiguous array padded with zeros. This creates
a larger :math:`(3N - 1) \times 4N` array padded with zeros.

.. plot:: _images/l1ball_adrt_full.py
    :include-source:


Back-projection
---------------

The back-projection is the transpose operation for the ADRT. This can be
computed by calling ``adrt.bdrt()``. The input should be an array in the
shape of the output of ``adrt.adrt()``. The output result is in the same
shape.

.. code:: python3

    bZ = adrt.bdrt(dZ)

We plot the result corresponding to four outputs below

.. plot:: _images/l1ball_bdrt_quadrants.py
    :include-source:

To complete the transpose operation, we map the output to the original
square-size image by calling ``adrt.utils.truncate(bZ)`` which truncates
the array and rotates the four quadrants to the original physical
orientation.

.. code:: python3

    tZ = adrt.utils.truncate(bZ)

Plotting this intermediate result shows the back-projected image for
individual single-quadrant ADRTs.

.. plot:: _images/l1ball_bdrt_truncate.py
    :include-source:

Averaging the four quadrants, one obtains the back-projected image.

.. code:: python3

    tZ = np.mean(tZ,axis=0)

The result is a blurred version of the original image.

.. plot:: _images/l1ball_bdrt.py
    :include-source:


Sinograms of an image
---------------------

We will demonstrate how the ADRT can be used to compute the sinograms
for the Shepp-Logan phantom

.. plot:: _images/shepp_logan.py
    :include-source:

.. code:: python3

    dimg = adrt.adrt(img)
    dimg_stitched = adrt.utils.stitch_adrt(dimg)

.. plot:: _images/shepp_logan_adrt_stitched.py
    :include-source:

When a sinogram of the image is desired, one calls
``adrt.utils.interp_to_cart()`` to interpolate the ADRT output to the
Cartesian grid in the continuous Radon variables.

.. code:: python3

    theta_cart, s_cart, dimg_cart = adrt.utils.interp_to_cart(dimg)

.. plot:: _images/shepp_logan_adrt_sinogram.py
    :include-source:


.. _iadrt-description:

Inverse of ADRT
---------------
Inverse Transforms
------------------

